import { NextRequest, NextResponse } from 'next/server';

// Gemini API configuration
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { 
      to_email, 
      to_name, 
      email_type,
      meeting_details,
      lead_info
    } = body;

    console.log('ü§ñ Sending Gemini-powered email:', { email_type, to_email, to_name });

    // Validate required fields
    if (!to_email || !email_type) {
      return NextResponse.json(
        { error: 'to_email and email_type are required' },
        { status: 400 }
      );
    }

    // Validate Gemini API key
    if (!GEMINI_API_KEY) {
      return NextResponse.json(
        { error: 'GEMINI_API_KEY not configured' },
        { status: 500 }
      );
    }

    // Generate email content using Gemini AI
    let emailPrompt = '';
    let emailSubject = '';

    switch (email_type) {
      case 'welcome_lead':
        emailSubject = 'Welcome to CognivexAI - Let\'s Build Something Amazing!';
        emailPrompt = `Generate a professional, warm welcome email for a new lead. 

Lead Information:
- Name: ${to_name || 'there'}
- Email: ${to_email}
- Company: CognivexAI
- Services: AI solutions, consulting, and custom development
- Contact: snazzy.mugi@gmail.com

Requirements:
- Professional but friendly tone
- Welcome them to CognivexAI
- Explain what we do briefly
- Include next steps (schedule consultation)
- Keep it under 150 words
- End with a call to action

Generate only the email body content, no subject line.`;
        break;

      case 'meeting_confirmation':
        emailSubject = `Meeting Confirmed: ${meeting_details?.summary || 'CognivexAI Consultation'}`;
        emailPrompt = `Generate a professional meeting confirmation email.

Meeting Details:
- Client Name: ${to_name || 'there'}
- Client Email: ${to_email}
- Meeting: ${meeting_details?.summary || 'CognivexAI Consultation'}
- Date: ${meeting_details?.date || 'TBD'}
- Time: ${meeting_details?.time || 'TBD'}
- Duration: ${meeting_details?.duration || '60 minutes'}
- Calendar Link: ${meeting_details?.calendar_link || 'Added to our calendar'}

Requirements:
- Confirm the meeting details
- Professional and enthusiastic tone
- Include all meeting information clearly
- Mention we're looking forward to it
- Keep it under 120 words
- End with excitement about the meeting

Generate only the email body content, no subject line.`;
        break;

      case 'team_notification':
        emailSubject = `New Lead Alert: ${lead_info?.name || 'Unknown'} - ${lead_info?.email || 'Unknown'}`;
        emailPrompt = `Generate a team notification email for a new lead.

Lead Information:
- Name: ${lead_info?.name || 'Unknown'}
- Email: ${lead_info?.email || 'Unknown'}
- Message: ${lead_info?.message || 'No message'}
- Lead Score: ${lead_info?.lead_score || 0}
- Meeting Status: ${meeting_details ? 'Meeting booked' : 'No meeting'}

Requirements:
- Clear lead summary
- Professional team notification format
- Include all lead details
- Action items for the team
- Keep it under 100 words
- Format as a business alert

Generate only the email body content, no subject line.`;
        break;

      default:
        return NextResponse.json(
          { error: 'Invalid email_type' },
          { status: 400 }
        );
    }

    // Call Gemini API to generate email content
    const geminiResponse = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: emailPrompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 300,
        }
      })
    });

    if (!geminiResponse.ok) {
      const errorText = await geminiResponse.text();
      console.error('‚ùå Gemini API error:', errorText);
      throw new Error(`Gemini API failed: ${errorText}`);
    }

    const geminiResult = await geminiResponse.json();
    const generatedEmailBody = geminiResult.candidates?.[0]?.content?.parts?.[0]?.text || '';

    if (!generatedEmailBody) {
      throw new Error('No content generated by Gemini API');
    }

    console.log(`‚úÖ Gemini email generated successfully: ${email_type} for ${to_email}`);

    // Now send the email using EmailJS
    try {
      // Call EmailJS endpoint to send the generated email
      const emailjsResponse = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:9002'}/api/email/send`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          to_email,
          to_name,
          subject: emailSubject,
          body: generatedEmailBody,
          email_type
        })
      });

      if (emailjsResponse.ok) {
        const emailjsResult = await emailjsResponse.json();
        console.log(`‚úÖ Email sent successfully via EmailJS: ${email_type} to ${to_email}`);
        
        return NextResponse.json({
          success: true,
          message: 'Email generated and sent successfully via Gemini AI + EmailJS',
          email_type,
          recipient: to_email,
          subject: emailSubject,
          body: generatedEmailBody,
          emailjs_result: emailjsResult
        });
      } else {
        const errorText = await emailjsResponse.text();
        throw new Error(`EmailJS failed: ${errorText}`);
      }

    } catch (emailjsError: any) {
      console.error('‚ùå EmailJS error:', emailjsError);
      
      // Return the generated content even if sending fails
      return NextResponse.json({
        success: true,
        message: 'Email content generated successfully via Gemini AI, but sending failed',
        email_type,
        recipient: to_email,
        subject: emailSubject,
        body: generatedEmailBody,
        note: 'Content generated. EmailJS error: ' + emailjsError.message
      });
    }

  } catch (error: any) {
    console.error('‚ùå Error with Gemini API:', error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: 'Failed to generate email via Gemini API',
        details: error.message 
      },
      { status: 500 }
    );
  }
}
